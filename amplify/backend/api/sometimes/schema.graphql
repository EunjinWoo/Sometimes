input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type User @model {
  id: ID!
  name: String!
  description: String!
  emojiPath: String!
  profilePath: String!
  gender: Gender!
}

type Like @model {
  id: ID!
  likeUserId: ID!
    @index(name: "byLikeUserId", queryField: "getLikeByLikeUserId")
  likedUserId: ID!
    @index(name: "byLikedUserId", queryField: "getLikeByLikedUserId")
}

type Step @model {
  id: ID!
  requestUserId: ID!
    @index(name: "byRequestUserId", queryField: "getStepByRequestUserId")
  targetUserId: ID!
    @index(name: "byTargetUserId", queryField: "getStepByTargetUserId")
  status: StepStatus!
  isAllowed: Boolean!
}

type Question @model {
  id: ID!
  kind: QuestionKind!
  description: String!
  type: QuestionType!
  isRequired: Boolean!
  userId: ID! @index(name: "byUserId", queryField: "getQuestionByUserId")
}

type Location @model {
  id: ID!
  x: Float!
  y: Float!
  userId: ID! @index(name: "byUserId", queryField: "getLocationByUserId")
}

type ChatRoom @model {
  id: ID!
  participant1Id: ID!
    @index(name: "byParticipant1Id", queryField: "getChatRoomByParticipant1Id")
  participant2Id: ID!
    @index(name: "byParticipant2Id", queryField: "getChatRoomByParticipant2Id")
}

type ChatItem @model {
  id: ID!
  message: String!
  senderId: ID!
  chatroomId: ID!
  action: ChatAction!
}

type Notification @model {
  id: ID!
  receiverId: ID!
    @index(name: "byReceiverId", queryField: "getNotificationByReceiverId")
  senderId: ID!
    @index(name: "bySenderId", queryField: "getNotificationBySenderId")
  message: String!
  type: NotificationType!
}

enum Gender {
  MALE
  FEMALE
}

enum StepStatus {
  STEP2
  STEP3
}

enum QuestionKind {
  AGE
  MBTI
  IDEAL_TYPE
  SIMMILAR_ANIMAL
}

enum QuestionType {
  STEP1
  STEP2
  STEP3
}

enum ChatAction {
  CREATE_JOIN_SUCCESS
  MESSAGE
}

enum NotificationType {
  LIKE
  QUESTION_LEVEL_2
  QUESTION_LEVEL_3
}
